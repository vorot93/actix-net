var searchIndex = JSON.parse('{\
"actix_codec":{"doc":"Codec utilities for working with framed protocols.","t":[8,8,3,8,8,16,16,3,3,16,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,5,11,10,10,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["AsyncRead","AsyncWrite","BytesCodec","Decoder","Encoder","Error","Error","Framed","FramedParts","Item","ReadBuf","advance","assume_init","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone_into","close","codec","codec_mut","codec_ref","decode","decode","decode_eof","encode","encode","filled","filled_mut","flush","fmt","fmt","fmt","fmt","framed","from","from","from","from","from_parts","initialize_unfilled","initialize_unfilled_to","initialized","initialized_mut","inner_mut","into","into","into","into","into_map_codec","into_map_io","into_parts","io","io_mut","io_pin","io_ref","is_read_buf_empty","is_write_buf_empty","is_write_buf_full","is_write_ready","is_write_vectored","new","new","new","next_item","poll_close","poll_flush","poll_flush","poll_next","poll_read","poll_read_buf","poll_ready","poll_shutdown","poll_write","poll_write_vectored","put_slice","read_buf","remaining","replace_codec","set_filled","start_send","take","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_poll_next","type_id","type_id","type_id","type_id","unfilled_mut","uninit","with_read_buf","write","write_buf"],"q":["actix_codec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Reads bytes from a source.","Writes bytes asynchronously.","Bytes codec.","Decoding of frames via buffers.","Trait of helper objects to write out messages as bytes, …","The type of unrecoverable frame decoding errors.","The type of encoding errors.","A unified <code>Stream</code> and <code>Sink</code> interface to an underlying I/O …","<code>FramedParts</code> contains an export of the data of a Framed …","The type of decoded frames.","A wrapper around a byte buffer that is incrementally …","Advances the size of the filled region of the buffer.","Asserts that the first <code>n</code> unfilled bytes of the buffer are …","","","","","","","","","Returns the total capacity of the buffer.","Clears the buffer, resetting the filled region to empty.","","","Flush write buffer and shutdown underlying I/O stream.","The codec","Returns a mutable reference to the underlying codec.","Returns a reference to the underlying codec.","Attempts to decode a frame from the provided buffer of …","","A default method available to be called when there are no …","Encodes a frame into the buffer provided.","","Returns a shared reference to the filled portion of the …","Returns a mutable reference to the filled portion of the …","Flush write buffer to underlying I/O stream.","","","","","Provides a <code>Stream</code> and <code>Sink</code> interface for reading and …","","","","","This function returns a <em>single</em> object that is both <code>Stream</code> …","Returns a mutable reference to the unfilled part of the …","Returns a mutable reference to the first <code>n</code> bytes of the …","Returns a shared reference to the initialized portion of …","Returns a mutable reference to the initialized portion of …","Returns a mutable reference to the entire buffer, without …","","","","","Consume the <code>Frame</code>, returning <code>Frame</code> with different codec.","Consume the <code>Frame</code>, returning <code>Frame</code> with different io.","Consumes the <code>Frame</code>, returning its underlying I/O stream, …","The inner transport used to read bytes to and write bytes …","Returns a mutable reference to the underlying I/O stream.","Returns a <code>Pin</code> of a mutable reference to the underlying …","Returns a reference to the underlying I/O stream wrapped …","Check if read buffer is empty.","Check if write buffer is empty.","Check if write buffer is full.","Check if framed is able to write more data.","Determines if this writer has an efficient …","This function returns a <em>single</em> object that is both <code>Stream</code> …","Create a new, default, <code>FramedParts</code>","Creates a new <code>ReadBuf</code> from a fully initialized buffer.","Try to read underlying I/O stream and decode item.","","Attempts to flush the object, ensuring that any buffered …","","","Attempts to read from the <code>AsyncRead</code> into <code>buf</code>.","Try to read data from an <code>AsyncRead</code> into an implementer of …","","Initiates or attempts to shut down this writer, returning …","Attempt to write bytes from <code>buf</code> into the object.","Like <code>poll_write</code>, except that it writes from a slice of …","Appends data to the buffer, advancing the written …","The buffer with read but unprocessed data.","Returns the number of bytes at the end of the slice that …","Consume the <code>Frame</code>, returning <code>Frame</code> with different codec.","Sets the size of the filled region of the buffer.","","Returns a new <code>ReadBuf</code> comprised of the unfilled section …","","","","","","","","","","","","","","","Returns a mutable reference to the unfilled part of the …","Creates a new <code>ReadBuf</code> from a fully uninitialized buffer.","Create a new <code>FramedParts</code> with read buffer","Serialize item and Write to the inner buffer","A buffer with unprocessed data which are not written yet."],"i":[0,0,0,0,0,1,2,0,0,1,0,3,3,4,5,6,3,4,5,6,3,3,3,4,4,5,6,5,5,1,4,1,2,4,3,3,5,4,5,6,3,1,4,5,6,3,5,3,3,3,3,3,4,5,6,3,5,5,5,6,5,5,5,5,5,5,5,7,5,6,3,5,5,7,5,5,8,0,5,7,7,7,3,6,3,5,3,5,3,4,4,5,6,3,4,5,6,3,5,4,5,6,3,3,3,6,5,6],"f":[null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["bytescodec",3]],[[]],[[["context",3],["pin",3]],[["result",4],["poll",4]]],null,[[]],[[]],[[["bytesmut",3]],[["result",4],["option",4]]],[[["bytesmut",3]],[["result",4],["option",4]]],[[["bytesmut",3]],[["result",4],["option",4]]],[[["bytesmut",3]],["result",4]],[[["bytes",3],["bytesmut",3]],["result",4]],[[]],[[]],[[["context",3],["pin",3]],[["result",4],["poll",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[],["framed",3]],[[]],[[]],[[]],[[]],[[["framedparts",3]],["framed",3]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["framed",3]],[[],["framed",3]],[[],["framedparts",3]],null,[[]],[[["pin",3]],["pin",3]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["framed",3]],[[],["framedparts",3]],[[],["readbuf",3]],[[["context",3],["pin",3]],[["option",4],["poll",4]]],[[["context",3],["pin",3]],[["poll",4],["result",4]]],[[["context",3],["pin",3]],[["result",4],["poll",4]]],[[["context",3],["pin",3]],[["poll",4],["result",4]]],[[["context",3],["pin",3]],[["option",4],["poll",4]]],[[["context",3],["readbuf",3],["pin",3]],[["result",4],["poll",4]]],[[["context",3],["pin",3]],[["result",4],["poll",4]]],[[["context",3],["pin",3]],[["poll",4],["result",4]]],[[["context",3],["pin",3]],[["result",4],["poll",4]]],[[["context",3],["pin",3]],[["result",4],["poll",4]]],[[["context",3],["pin",3]],[["result",4],["poll",4]]],[[]],null,[[],["usize",15]],[[],["framed",3]],[[["usize",15]]],[[["pin",3]],["result",4]],[[["usize",15]],["readbuf",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["pin",3],["context",3]],[["option",4],["poll",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["readbuf",3]],[[["bytesmut",3]],["framedparts",3]],[[["pin",3]],["result",4]],null],"p":[[8,"Decoder"],[8,"Encoder"],[3,"ReadBuf"],[3,"BytesCodec"],[3,"Framed"],[3,"FramedParts"],[8,"AsyncWrite"],[8,"AsyncRead"]]},\
"actix_macros":{"doc":"Macros for Actix system and runtime.","t":[23,23],"n":["main","test"],"q":["actix_macros",""],"d":["Marks async entry-point function to be executed by Actix …","Marks async test function to be executed in an Actix …"],"i":[0,0],"f":[null,null],"p":[]},\
"actix_router":{"doc":"Resource path matching library.","tn":["IntoPattern","Path","PathDeserializer","Quoter","Resource","ResourceDef","ResourceInfo","ResourcePath","Router","RouterBuilder","Url","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","eq","finish","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get","get_mut","get_ref","hash","id","index","index","into","into","into","into","into","into","into","into","is_empty","is_match","is_prefix_match","is_single","iter","len","load","match_path","match_path_checked","name","name_mut","new","new","new","new","new","path","path","path","path","path","pattern","patterns","prefix","prefix","query","rdef","recognize","recognize_checked","recognize_mut","recognize_mut_checked","requote","reset","resource_path","resource_path","resource_path","resource_path_named","root_prefix","set","set_id","skip","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unprocessed","update","update_with_quoter","uri","with_quoter"],"q":["actix_routerd":["Helper trait for type that could be converted to path …","Resource path match information","","","","ResourceDef describes an entry in resources table","Information about current resource","","Resource router.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Finish configuration and create router instance.","","","","","","","","","","","","","","","Get matched parameter by name without type conversion","Get mutable reference to inner path instance","Get reference to inner path instance","","Resource id","","","","","","","","","","","Check if there are any matched patterns","Check if path matches this pattern.","Is prefix path a match against this resource.","","Return iterator to items in parameter container","Check number of extracted parameters","Try to deserialize matching parameters to a specified …","Is the given path and parameters a match against this …","Is the given path and parameters a match against this …","Resource pattern name","Mutable reference to a name of a resource definition.","","","","Parse path pattern and create new <code>Pattern</code> instance.","","","Register resource for specified path.","Path","","","Path pattern of the resource","","Register resource for specified path prefix.","Parse path pattern and create new <code>Pattern</code> instance.","Get matched parameter by name.","Register resource for ResourceDef","","","","","","Reset state","","","Build resource path from elements. Returns <code>true</code> on …","Build resource path from elements. Returns <code>true</code> on …","Parse path pattern and create new <code>Pattern</code> instance. …","Set new path","Set resource id","Skip first <code>n</code> chars in path","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get unprocessed part of the path","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,2,5,6,7,8,5,6,7,8,5,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,3,5,6,7,8,1,2,3,4,5,6,6,6,7,8,5,5,5,6,6,5,5,1,2,3,4,5,6,7,8,5,6,6,9,5,5,5,6,6,6,6,1,4,5,6,8,10,3,5,8,8,6,9,3,6,5,3,2,2,2,2,4,5,11,5,6,6,6,5,6,5,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,5,8,8,8,8],"f":[null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["routerbuilder",3]],[[]],[[],["resourcedef",3]],[[],["resourceinfo",3]],[[],["url",3]],[[]],[[]],[[]],[[]],[[]],[[],["url",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["resourcedef",3]],["bool",15]],[[],["router",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["resourcedef",3]],[[["string",3]],["resourcedef",3]],[[]],[[]],[[["str",15]],[["option",4],["str",15]]],[[]],[[]],[[]],[[],["u16",15]],[[["str",15]],["str",15]],[[["usize",15]],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["str",15]],["bool",15]],[[["str",15]],[["usize",15],["option",4]]],[[],["bool",15]],[[],["pathiter",3]],[[],["usize",15]],[[],[["error",3],["result",4],["deserialize",8]]],[[["path",3]],["bool",15]],[[["option",4]],["bool",15]],[[],["str",15]],[[],["string",3]],[[["path",3]]],[[],["quoter",3]],[[],["path",3]],[[["intopattern",8]]],[[["uri",3]],["url",3]],[[],["str",15]],[[["intopattern",8]]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],[["vec",3],["string",3]]],[[["str",15]]],[[["str",15]]],[[["str",15]],["str",15]],[[["resourcedef",3]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],[["option",4],["string",3]]],[[]],[[],["path",3]],[[]],[[["string",3]],["bool",15]],[[["hashmap",3],["string",3]],["bool",15]],[[["str",15]]],[[]],[[["u16",15]]],[[["u16",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["str",15]],[[["uri",3]]],[[["uri",3],["quoter",3]]],[[],["uri",3]],[[["quoter",3],["uri",3]],["url",3]]],"p":[[3,"PathDeserializer"],[3,"Router"],[3,"RouterBuilder"],[3,"Quoter"],[3,"Path"],[3,"ResourceDef"],[3,"ResourceInfo"],[3,"Url"],[8,"IntoPattern"],[8,"ResourcePath"],[8,"Resource"]]},\
"actix_rt":{"doc":"Tokio-based single-threaded async runtime for the Actix …","t":[3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,23,0,11,11,11,14,11,0,5,11,11,11,11,11,11,11,11,11,0,23,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,18,3,3,3,3,3,3,3,3,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,5,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Arbiter","ArbiterHandle","Runtime","System","SystemRunner","arbiter","block_on","block_on","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","current","current","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","handle","id","into","into","into","into","into","is_registered","join","main","net","new","new","new","pin","run","signal","spawn","spawn","spawn","spawn","spawn_fn","spawn_fn","stop","stop","stop","stop_with_code","task","test","time","to_owned","to_owned","try_current","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","ALL","EMPTY","READABLE","READ_CLOSED","Ready","TcpListener","TcpSocket","TcpStream","UdpSocket","UnixDatagram","UnixListener","UnixStream","WRITABLE","WRITE_CLOSED","accept","accept","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","bind","bind","bind","bind","bind","bitand","bitor","bitor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast","clone","clone_into","connect","connect","connect","connect","connect","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_raw_fd","from_std","from_std","from_std","from_std","from_std","from_std","into","into","into","into","into","into","into","into","into_raw_fd","into_split","into_split","into_std","into_std","into_std","into_std","into_std","into_std","is_empty","is_read_closed","is_readable","is_writable","is_write_closed","is_write_vectored","is_write_vectored","join_multicast_v4","join_multicast_v6","leave_multicast_v4","leave_multicast_v6","linger","listen","local_addr","local_addr","local_addr","local_addr","local_addr","local_addr","local_addr","multicast_loop_v4","multicast_loop_v6","multicast_ttl_v4","ne","new_v4","new_v6","nodelay","pair","pair","partial_cmp","peek","peek_from","peer_addr","peer_addr","peer_addr","peer_cred","poll_accept","poll_accept","poll_flush","poll_flush","poll_peek","poll_peek_from","poll_read","poll_read","poll_read_ready","poll_read_ready","poll_recv","poll_recv","poll_recv_from","poll_recv_from","poll_send","poll_send","poll_send_to","poll_send_to","poll_shutdown","poll_shutdown","poll_write","poll_write","poll_write_ready","poll_write_ready","poll_write_vectored","poll_write_vectored","readable","readable","readable","readable","ready","ready","ready","ready","recv","recv","recv_buffer_size","recv_from","recv_from","reuseaddr","reuseport","send","send","send_buffer_size","send_to","send_to","set_broadcast","set_linger","set_multicast_loop_v4","set_multicast_loop_v6","set_multicast_ttl_v4","set_nodelay","set_recv_buffer_size","set_reuseaddr","set_reuseport","set_send_buffer_size","set_ttl","set_ttl","set_ttl","shutdown","split","split","sub","take_error","take_error","take_error","take_error","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_read","try_read","try_read_buf","try_read_buf","try_recv","try_recv","try_recv_buf","try_recv_buf","try_recv_buf_from","try_recv_buf_from","try_recv_from","try_recv_from","try_send","try_send","try_send_to","try_send_to","try_write","try_write","ttl","ttl","ttl","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unbound","writable","writable","writable","writable","ctrl_c","unix","Signal","SignalKind","alarm","borrow","borrow","borrow_mut","borrow_mut","child","clone","clone_into","fmt","fmt","from","from","from_raw","hangup","interrupt","into","into","io","pipe","poll_recv","quit","recv","signal","terminate","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","user_defined1","user_defined2","window_change","JoinError","JoinHandle","abort","borrow","borrow","borrow_mut","borrow_mut","drop","fmt","fmt","fmt","from","from","into","into","into_future","into_panic","is_cancelled","is_panic","poll","spawn_blocking","to_string","try_from","try_from","try_into","try_into","try_into_panic","try_poll","type_id","type_id","yield_now","Instant","Interval","Sleep","Timeout","add","add_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_duration_since","checked_sub","clone","clone_into","cmp","deadline","duration_since","elapsed","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from_std","get_mut","get_ref","hash","interval","interval_at","into","into","into","into","into_future","into_future","into_inner","into_std","is_elapsed","ne","now","partial_cmp","poll","poll","poll_tick","reset","saturating_duration_since","sleep","sleep_until","sub","sub","sub_assign","tick","timeout","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_poll","type_id","type_id","type_id","type_id"],"q":["actix_rt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","actix_rt::netactix_rt::signal","","actix_rt::signal::unix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","actix_rt::task","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","actix_rt::time","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An Arbiter represents a thread that provides an …","A handle for sending spawn and stop messages to an […","A Tokio-based runtime proxy.","A manager for a per-thread distributed async runtime.","Runner that keeps a [System]’s event loop alive until …","Get handle to a the System’s initial [Arbiter].","Runs the provided future, blocking the current thread …","Runs the provided future, blocking the current thread …","","","","","","","","","","","","","","","Return a handle to the current thread’s Arbiter’s …","Get current running system.","","","","","","","","","","","","Return a handle to the this Arbiter’s message sender.","Numeric system identifier.","","","","","","Check if there is a System registered on the current …","Wait for Arbiter’s event loop to complete.","Marks async entry-point function to be executed by Actix …","TCP/UDP/Unix bindings (mostly Tokio re-exports).","Spawn a new Arbiter thread and start its event loop.","Returns a new runtime initialized with default …","Create a new system.","Pins a value on the stack.","Starts event loop and will return once [System] is stopped…","Asynchronous signal handling (Tokio re-exports).","Spawns a future on the current thread.","Send a future to the [Arbiter]’s thread and spawn it.","Send a future to the Arbiter’s thread and spawn it.","Offload a future onto the single-threaded runtime.","Send a function to the [Arbiter]’s thread and execute …","Send a function to the Arbiter’s thread and execute it.","Instruct [Arbiter] to stop processing it’s event loop.","Stop Arbiter from continuing it’s event loop.","Stop the system (with code 0).","Stop the system with a given exit code.","Task management (Tokio re-exports).","Marks async test function to be executed in an Actix …","Utilities for tracking time (Tokio re-exports).","","","Try to get current running system.","","","","","","","","","","","","","","","","Returns a <code>Ready</code> representing readiness for all operations.","Returns the empty <code>Ready</code> set.","Returns a <code>Ready</code> representing readable readiness.","Returns a <code>Ready</code> representing read closed readiness.","Describes the readiness state of an I/O resources.","A TCP socket server, listening for connections.","A TCP socket that has not yet been converted to a …","A TCP stream between a local and a remote socket.","A UDP socket","An I/O object representing a Unix datagram socket.","A Unix socket which can accept connections from other …","A structure representing a connected Unix socket.","Returns a <code>Ready</code> representing writable readiness.","Returns a <code>Ready</code> representing write closed readiness.","Accepts a new incoming connection from this listener.","Accepts a new incoming connection to this listener.","","","","","","","","Creates a new TcpListener, which will be bound to the …","Bind the socket to the given address.","This function will create a new UDP socket and attempt to …","Creates a new <code>UnixDatagram</code> bound to the specified path.","Creates a new <code>UnixListener</code> bound to the specified path.","","","","","","","","","","","","","","","","","","","","Gets the value of the <code>SO_BROADCAST</code> option for this socket.","","","Establish a TCP connection with a peer at the specified …","Opens a TCP connection to a remote host.","Connects the UDP socket setting the default destination …","Connects the socket to the specified address.","Connects to the socket named by <code>path</code>.","","","","","","","","","","","","","","","","","","Converts a <code>RawFd</code> to a <code>TcpSocket</code>.","Creates new <code>TcpListener</code> from a <code>std::net::TcpListener</code>.","Creates new <code>TcpStream</code> from a <code>std::net::TcpStream</code>.","Creates new <code>UdpSocket</code> from a previously bound …","Creates new <code>UnixDatagram</code> from a …","Creates new <code>UnixListener</code> from a …","Creates new <code>UnixStream</code> from a …","","","","","","","","","","Splits a <code>TcpStream</code> into a read half and a write half, …","Splits a <code>UnixStream</code> into a read half and a write half, …","Turn a <code>tokio::net::TcpListener</code> into a …","Turn a <code>tokio::net::TcpStream</code> into a <code>std::net::TcpStream</code>.","Turn a <code>tokio::net::UdpSocket</code> into a <code>std::net::UdpSocket</code>.","Turn a <code>tokio::net::UnixDatagram</code> into a …","Turn a <code>tokio::net::UnixListener</code> into a …","Turn a <code>tokio::net::UnixStream</code> into a …","Returns true if <code>Ready</code> is the empty set","Returns <code>true</code> if the value includes read-closed <code>readiness</code>","Returns <code>true</code> if the value includes <code>readable</code>","Returns <code>true</code> if the value includes writable <code>readiness</code>","Returns <code>true</code> if the value includes write-closed <code>readiness</code>","","","Executes an operation of the <code>IP_ADD_MEMBERSHIP</code> type.","Executes an operation of the <code>IPV6_ADD_MEMBERSHIP</code> type.","Executes an operation of the <code>IP_DROP_MEMBERSHIP</code> type.","Executes an operation of the <code>IPV6_DROP_MEMBERSHIP</code> type.","Reads the linger duration for this socket by getting the …","Convert the socket into a <code>TcpListener</code>.","Returns the local address that this listener is bound to.","Get the local address of this socket.","Returns the local address that this stream is bound to.","Returns the local address that this socket is bound to.","Returns the local address that this socket is bound to.","Returns the local socket address of this listener.","Returns the socket address of the local half of this …","Gets the value of the <code>IP_MULTICAST_LOOP</code> option for this …","Gets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …","Gets the value of the <code>IP_MULTICAST_TTL</code> option for this …","","Create a new socket configured for IPv4.","Create a new socket configured for IPv6.","Gets the value of the <code>TCP_NODELAY</code> option on this socket.","Creates an unnamed pair of connected sockets.","Creates an unnamed pair of connected sockets.","","Receives data on the socket from the remote address to …","Receives data from the socket, without removing it from …","Returns the remote address that this stream is connected …","Returns the address of this socket’s peer.","Returns the socket address of the remote half of this …","Returns effective credentials of the process which called …","Polls to accept a new incoming connection to this …","Polls to accept a new incoming connection to this …","","","Attempts to receive data on the socket, without removing …","Receives data from the socket, without removing it from …","","","Polls for read readiness.","Polls for read readiness.","Attempts to receive a single datagram message on the …","Attempts to receive a single datagram message on the …","Attempts to receive a single datagram on the socket.","Attempts to receive a single datagram on the specified …","Attempts to send data on the socket to the remote address …","Attempts to send data on the socket to the remote address …","Attempts to send data on the socket to a given address.","Attempts to send data to the specified address.","","","","","Polls for write readiness.","Polls for write readiness.","","","Wait for the socket to become readable.","Wait for the socket to become readable.","Wait for the socket to become readable.","Wait for the socket to become readable.","Wait for any of the requested ready states.","Wait for any of the requested ready states.","Wait for any of the requested ready states.","Wait for any of the requested ready states.","Receives a single datagram message on the socket from the …","Receives data from the socket.","Returns the size of the TCP receive buffer for this …","Receives a single datagram message on the socket. On …","Receives data from the socket.","Retrieves the value set for <code>SO_REUSEADDR</code> on this socket","Allow the socket to bind to an in-use port. Only …","Sends data on the socket to the remote address that the …","Sends data on the socket to the socket’s peer.","Returns the size of the TCP send buffer for this socket.","Sends data on the socket to the given address. On …","Sends data on the socket to the specified address.","Sets the value of the <code>SO_BROADCAST</code> option for this socket.","Sets the linger duration of this socket by setting the …","Sets the value of the <code>IP_MULTICAST_LOOP</code> option for this …","Sets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …","Sets the value of the <code>IP_MULTICAST_TTL</code> option for this …","Sets the value of the <code>TCP_NODELAY</code> option on this socket.","Sets the size of the TCP receive buffer on this socket.","Allow the socket to bind to an in-use address.","Allow the socket to bind to an in-use port. Only …","Sets the size of the TCP send buffer on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Shuts down the read, write, or both halves of this …","Splits a <code>TcpStream</code> into a read half and a write half, …","Split a <code>UnixStream</code> into a read half and a write half, …","","Returns the value of the <code>SO_ERROR</code> option.","Returns the value of the <code>SO_ERROR</code> option.","Returns the value of the <code>SO_ERROR</code> option.","Returns the value of the <code>SO_ERROR</code> option.","","","Consumes stream, returning the tokio I/O object.","","","Consumes stream, returning the tokio I/O object.","","Consumes stream, returning the tokio I/O object.","","Consumes stream, returning the Tokio I/O object.","","","Consumes stream, returning the tokio I/O object.","Consumes stream, returning the tokio I/O object.","","","","","","","","","","Try to read data from the stream into the provided …","Try to read data from the stream into the provided …","Try to read data from the stream into the provided …","Try to read data from the stream into the provided …","Try to receive a single datagram message on the socket …","Try to receive a datagram from the peer without waiting.","Try to receive data from the stream into the provided …","Try to read data from the stream into the provided …","Try to receive a single datagram message on the socket. …","Try to receive data from the socket without waiting.","Try to receive a single datagram message on the socket. …","Try to receive data from the socket without waiting.","Try to send data on the socket to the remote address to …","Try to send a datagram to the peer without waiting.","Try to send data on the socket to the given address, but …","Try to send a datagram to the peer without waiting.","Try to write a buffer to the stream, returning how many …","Try to write a buffer to the stream, returning how many …","Gets the value of the <code>IP_TTL</code> option for this socket.","Gets the value of the <code>IP_TTL</code> option for this socket.","Gets the value of the <code>IP_TTL</code> option for this socket.","","","","","","","","","Creates a new <code>UnixDatagram</code> which is not bound to any …","Wait for the socket to become writable.","Wait for the socket to become writable.","Wait for the socket to become writable.","Wait for the socket to become writable.","Completes when a “ctrl-c” notification is sent to the …","Unix specific signals (Tokio re-exports).","A stream of events for receiving a particular type of OS …","Represents the specific kind of signal to listen for.","Represents the SIGALRM signal.","","","","","Represents the SIGCHLD signal.","","","","","","","Allows for listening to any valid OS signal.","Represents the SIGHUP signal.","Represents the SIGINT signal.","","","Represents the SIGIO signal.","Represents the SIGPIPE signal.","Polls to receive the next signal notification event, …","Represents the SIGQUIT signal.","Receives the next signal notification event.","Creates a new stream which will receive notifications …","Represents the SIGTERM signal.","","","","","","","","Represents the SIGUSR1 signal.","Represents the SIGUSR2 signal.","Represents the SIGWINCH signal.","Task failed to execute to completion.","An owned permission to join on a task (await its …","Abort the task associated with the handle.","","","","","","","","","","","","","","Consumes the join error, returning the object with which …","Returns true if the error was caused by the task being …","Returns true if the error was caused by the task panicking","","Runs the provided closure on a thread where blocking is …","","","","","","Consumes the join error, returning the object with which …","","","","Yields execution back to the Tokio runtime.","A measurement of a monotonically nondecreasing clock. …","Interval returned by <code>interval</code> and <code>interval_at</code>.","Future returned by <code>sleep</code> and <code>sleep_until</code>.","Future returned by <code>timeout</code> and <code>timeout_at</code>.","","","","","","","","","","","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …","Returns the amount of time elapsed from another instant …","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …","","","","Returns the instant at which the future will complete.","Returns the amount of time elapsed from another instant …","Returns the amount of time elapsed since this instant was …","","","","","","","","","","","Create a <code>tokio::time::Instant</code> from a <code>std::time::Instant</code>.","Gets a mutable reference to the underlying value in this …","Gets a reference to the underlying value in this timeout.","","Creates new <code>Interval</code> that yields with interval of <code>duration</code>…","Creates new <code>Interval</code> that yields with interval of <code>period</code> …","","","","","","","Consumes this timeout, returning the underlying value.","Convert the value into a <code>std::time::Instant</code>.","Returns <code>true</code> if <code>Sleep</code> has elapsed.","","Returns an instant corresponding to “now”.","","","","Poll for the next instant in the interval to be reached.","Resets the <code>Sleep</code> instance to a new deadline.","Returns the amount of time elapsed from another instant …","Waits until <code>duration</code> has elapsed.","Waits until <code>deadline</code> is reached.","","","","Completes when the next instant in the interval has been …","Require a <code>Future</code> to complete before the specified …","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,1,2,3,4,5,2,1,3,4,5,2,1,3,4,1,4,1,5,1,4,5,2,1,3,4,5,2,2,1,3,5,1,4,5,2,1,3,1,5,0,0,5,2,1,0,3,0,0,4,5,2,4,5,4,5,1,1,0,0,0,4,1,1,4,5,2,1,3,4,5,2,1,3,4,5,2,1,3,6,6,6,6,0,0,0,0,0,0,0,0,6,6,7,8,7,9,10,11,12,8,13,7,9,11,12,8,6,6,6,6,7,9,10,11,12,8,13,6,7,9,10,11,12,8,13,11,6,6,9,10,11,12,13,6,6,7,9,10,11,12,8,13,6,7,9,10,11,12,8,13,9,7,10,11,12,8,13,6,7,9,10,11,12,8,13,9,10,13,7,10,11,12,8,13,6,6,6,6,6,10,13,11,11,11,11,10,9,7,9,10,11,12,8,13,11,11,11,6,9,9,10,12,13,6,10,11,10,12,13,13,7,8,10,13,10,11,10,13,10,13,11,12,11,12,11,12,11,12,10,13,10,13,10,13,10,13,10,11,12,13,10,11,12,13,11,12,9,11,12,9,9,11,12,9,11,12,11,10,11,11,11,10,9,9,9,9,7,10,11,12,10,13,6,11,12,8,13,6,6,7,7,9,10,10,11,11,12,12,8,8,13,13,6,7,9,10,11,12,8,13,10,13,10,13,11,12,11,12,11,12,11,12,11,12,11,12,10,13,7,10,11,6,7,9,10,11,12,8,13,12,10,11,12,13,0,0,0,0,14,14,15,14,15,14,14,14,14,15,14,15,14,14,14,14,15,14,14,15,14,15,0,14,14,14,15,14,15,14,15,14,14,14,0,0,16,17,16,17,16,16,17,17,16,17,16,17,16,16,17,17,17,16,0,17,17,16,17,16,17,16,17,16,0,0,0,0,0,18,18,18,19,20,21,18,19,20,21,18,18,18,18,18,18,21,18,18,18,18,19,20,21,18,18,19,20,21,18,20,20,18,0,0,18,19,20,21,20,21,20,18,21,18,18,18,20,21,19,21,18,0,0,18,18,18,19,0,18,18,19,20,21,18,19,20,21,20,18,19,20,21],"f":[null,null,null,null,null,[[],["arbiterhandle",3]],[[]],[[["future",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["arbiterhandle",3]],[[],["system",3]],[[]],[[]],[[],["arbiterhandle",3]],[[],["system",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["runtime",3]]],[[]],[[]],[[],["arbiterhandle",3]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["result",6]],null,null,[[],["arbiter",3]],[[],["result",6]],[[],["systemrunner",3]],null,[[],["result",6]],null,[[],["joinhandle",3]],[[],["bool",15]],[[],["bool",15]],[[],["joinhandle",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[["i32",15]]],null,null,null,[[]],[[]],[[],[["system",3],["option",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[["socketaddr",4]],[["result",4],["error",3]]],[[]],[[],[["result",4],["unixdatagram",3],["error",3]]],[[],[["error",3],["unixlistener",3],["result",4]]],[[["ready",3]],["ready",3]],[[["ready",3]],["ready",3]],[[["ready",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["bool",15],["result",4],["error",3]]],[[],["ready",3]],[[]],[[["socketaddr",4]]],[[]],[[]],[[],[["result",4],["error",3]]],[[]],[[["ready",3]],["bool",15]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]],["tcpsocket",3]],[[["tcplistener",3]],[["result",4],["tcplistener",3],["error",3]]],[[["tcpstream",3]],[["error",3],["tcpstream",3],["result",4]]],[[["udpsocket",3]],[["error",3],["result",4],["udpsocket",3]]],[[["unixdatagram",3]],[["result",4],["unixdatagram",3],["error",3]]],[[["unixlistener",3]],[["error",3],["unixlistener",3],["result",4]]],[[["unixstream",3]],[["result",4],["unixstream",3],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[]],[[]],[[],[["tcplistener",3],["error",3],["result",4]]],[[],[["result",4],["tcpstream",3],["error",3]]],[[],[["error",3],["udpsocket",3],["result",4]]],[[],[["error",3],["unixdatagram",3],["result",4]]],[[],[["unixlistener",3],["error",3],["result",4]]],[[],[["error",3],["result",4],["unixstream",3]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["ipv4addr",3]],[["result",4],["error",3]]],[[["u32",15],["ipv6addr",3]],[["result",4],["error",3]]],[[["ipv4addr",3]],[["result",4],["error",3]]],[[["u32",15],["ipv6addr",3]],[["result",4],["error",3]]],[[],[["option",4],["error",3],["result",4]]],[[["u32",15]],[["result",4],["tcplistener",3],["error",3]]],[[],[["error",3],["socketaddr",4],["result",4]]],[[],[["error",3],["socketaddr",4],["result",4]]],[[],[["error",3],["socketaddr",4],["result",4]]],[[],[["error",3],["socketaddr",4],["result",4]]],[[],[["error",3],["result",4],["socketaddr",3]]],[[],[["error",3],["result",4],["socketaddr",3]]],[[],[["error",3],["result",4],["socketaddr",3]]],[[],[["bool",15],["result",4],["error",3]]],[[],[["bool",15],["result",4],["error",3]]],[[],[["u32",15],["error",3],["result",4]]],[[["ready",3]],["bool",15]],[[],[["tcpsocket",3],["error",3],["result",4]]],[[],[["tcpsocket",3],["error",3],["result",4]]],[[],[["bool",15],["result",4],["error",3]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[["ready",3]],[["option",4],["ordering",4]]],[[]],[[]],[[],[["error",3],["socketaddr",4],["result",4]]],[[],[["error",3],["result",4],["socketaddr",3]]],[[],[["error",3],["result",4],["socketaddr",3]]],[[],[["error",3],["result",4],["ucred",3]]],[[["context",3]],[["poll",4],["result",4]]],[[["context",3]],[["result",4],["poll",4]]],[[["tcpstream",3],["context",3],["pin",3]],[["result",4],["poll",4]]],[[["pin",3],["context",3],["unixstream",3]],[["result",4],["poll",4]]],[[["context",3],["readbuf",3]],[["result",4],["poll",4]]],[[["context",3],["readbuf",3]],[["result",4],["poll",4]]],[[["readbuf",3],["tcpstream",3],["context",3],["pin",3]],[["result",4],["poll",4]]],[[["readbuf",3],["pin",3],["context",3],["unixstream",3]],[["result",4],["poll",4]]],[[["context",3]],[["result",4],["poll",4]]],[[["context",3]],[["result",4],["poll",4]]],[[["context",3],["readbuf",3]],[["result",4],["poll",4]]],[[["context",3],["readbuf",3]],[["result",4],["poll",4]]],[[["context",3],["readbuf",3]],[["result",4],["poll",4]]],[[["context",3],["readbuf",3]],[["poll",4],["result",4]]],[[["context",3]],[["result",4],["poll",4]]],[[["context",3]],[["result",4],["poll",4]]],[[["context",3],["socketaddr",4]],[["result",4],["poll",4]]],[[["context",3]],[["result",4],["poll",4]]],[[["tcpstream",3],["context",3],["pin",3]],[["result",4],["poll",4]]],[[["pin",3],["context",3],["unixstream",3]],[["result",4],["poll",4]]],[[["tcpstream",3],["context",3],["pin",3]],[["result",4],["poll",4]]],[[["pin",3],["context",3],["unixstream",3]],[["result",4],["poll",4]]],[[["context",3]],[["result",4],["poll",4]]],[[["context",3]],[["result",4],["poll",4]]],[[["tcpstream",3],["context",3],["pin",3]],[["result",4],["poll",4]]],[[["pin",3],["context",3],["unixstream",3]],[["result",4],["poll",4]]],[[]],[[]],[[]],[[]],[[["interest",3]]],[[["interest",3]]],[[["interest",3]]],[[["interest",3]]],[[]],[[]],[[],[["u32",15],["error",3],["result",4]]],[[]],[[]],[[],[["bool",15],["result",4],["error",3]]],[[],[["bool",15],["result",4],["error",3]]],[[]],[[]],[[],[["u32",15],["error",3],["result",4]]],[[]],[[]],[[["bool",15]],[["result",4],["error",3]]],[[["option",4],["duration",3]],[["result",4],["error",3]]],[[["bool",15]],[["result",4],["error",3]]],[[["bool",15]],[["result",4],["error",3]]],[[["u32",15]],[["result",4],["error",3]]],[[["bool",15]],[["result",4],["error",3]]],[[["u32",15]],[["result",4],["error",3]]],[[["bool",15]],[["result",4],["error",3]]],[[["bool",15]],[["result",4],["error",3]]],[[["u32",15]],[["result",4],["error",3]]],[[["u32",15]],[["result",4],["error",3]]],[[["u32",15]],[["result",4],["error",3]]],[[["u32",15]],[["result",4],["error",3]]],[[["shutdown",4]],[["result",4],["error",3]]],[[]],[[]],[[["ready",3]],["ready",3]],[[],[["error",3],["option",4],["result",4]]],[[],[["error",3],["option",4],["result",4]]],[[],[["error",3],["option",4],["result",4]]],[[],[["error",3],["option",4],["result",4]]],[[]],[[],["result",4]],[[["tcplistener",3]],[["tcplistener",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[["tcpstream",3]],[["result",4],["tcpstream",3]]],[[],["result",4]],[[["udpsocket",3]],[["result",4],["udpsocket",3]]],[[],["result",4]],[[["unixdatagram",3]],[["unixdatagram",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[["unixlistener",3]],[["error",3],["unixlistener",3],["result",4]]],[[["unixstream",3]],[["result",4],["unixstream",3],["error",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4],["usize",15],["error",3]]],[[],[["result",4],["usize",15],["error",3]]],[[],[["result",4],["usize",15],["error",3]]],[[],[["result",4],["usize",15],["error",3]]],[[],[["result",4],["usize",15],["error",3]]],[[],[["result",4],["usize",15],["error",3]]],[[],[["result",4],["usize",15],["error",3]]],[[],[["result",4],["usize",15],["error",3]]],[[],[["error",3],["result",4]]],[[],[["result",4],["error",3]]],[[],[["error",3],["result",4]]],[[],[["result",4],["error",3]]],[[],[["result",4],["usize",15],["error",3]]],[[],[["result",4],["usize",15],["error",3]]],[[["socketaddr",4]],[["result",4],["usize",15],["error",3]]],[[],[["result",4],["usize",15],["error",3]]],[[],[["result",4],["usize",15],["error",3]]],[[],[["result",4],["usize",15],["error",3]]],[[],[["u32",15],["error",3],["result",4]]],[[],[["u32",15],["error",3],["result",4]]],[[],[["u32",15],["error",3],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["result",4],["unixdatagram",3],["error",3]]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["signalkind",3]],[[]],[[]],[[]],[[]],[[],["signalkind",3]],[[],["signalkind",3]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[["i32",15]],["signalkind",3]],[[],["signalkind",3]],[[],["signalkind",3]],[[]],[[]],[[],["signalkind",3]],[[],["signalkind",3]],[[["context",3]],[["poll",4],["option",4]]],[[],["signalkind",3]],[[]],[[["signalkind",3]],[["error",3],["result",4],["signal",3]]],[[],["signalkind",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["signalkind",3]],[[],["signalkind",3]],[[],["signalkind",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[],[["any",8],["global",3],["box",3]]],[[],["bool",15]],[[],["bool",15]],[[["context",3],["joinhandle",3],["pin",3]],["poll",4]],[[],["joinhandle",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["joinerror",3],["result",4],["box",3]]],[[["context",3],["pin",3]],["poll",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,[[["duration",3]],["instant",3]],[[["duration",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["duration",3]],[["option",4],["instant",3]]],[[["instant",3]],[["option",4],["duration",3]]],[[["duration",3]],[["option",4],["instant",3]]],[[],["instant",3]],[[]],[[["instant",3]],["ordering",4]],[[],["instant",3]],[[["instant",3]],["duration",3]],[[],["duration",3]],[[["instant",3]],["bool",15]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["instant",3]],["instant",3]],[[]],[[]],[[]],[[]],[[["instant",3]],["instant",3]],[[]],[[]],[[]],[[["duration",3]],["interval",3]],[[["instant",3],["duration",3]],["interval",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["instant",3]],[[],["bool",15]],[[["instant",3]],["bool",15]],[[],["instant",3]],[[["instant",3]],[["option",4],["ordering",4]]],[[["pin",3],["timeout",3],["context",3]],["poll",4]],[[["pin",3],["context",3],["sleep",3]],["poll",4]],[[["context",3]],[["poll",4],["instant",3]]],[[["pin",3],["instant",3],["sleep",3]]],[[["instant",3]],["duration",3]],[[["duration",3]],["sleep",3]],[[["instant",3]],["sleep",3]],[[["instant",3]],["duration",3]],[[["duration",3]],["instant",3]],[[["duration",3]]],[[]],[[["duration",3]],["timeout",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["context",3],["pin",3]],["poll",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"System"],[3,"Runtime"],[3,"SystemRunner"],[3,"ArbiterHandle"],[3,"Arbiter"],[3,"Ready"],[3,"TcpListener"],[3,"UnixListener"],[3,"TcpSocket"],[3,"TcpStream"],[3,"UdpSocket"],[3,"UnixDatagram"],[3,"UnixStream"],[3,"SignalKind"],[3,"Signal"],[3,"JoinHandle"],[3,"JoinError"],[3,"Instant"],[3,"Interval"],[3,"Timeout"],[3,"Sleep"]]},\
"actix_server":{"doc":"General purpose TCP server.","t":[16,3,3,3,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Factory","Server","ServerBuilder","ServiceConfig","ServiceFactory","ServiceRuntime","TestServer","apply","backlog","bind","bind","bind_uds","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone_into","configure","create","default","disable_signals","fmt","from","from","from","from","from","into","into","into","into","into","into_future","into_future","listen","listen","listen_uds","maxconn","new","new","on_start","pause","poll","poll","resume","run","service","shutdown_timeout","start","stop","system_exit","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_poll","type_id","type_id","type_id","type_id","type_id","unused_addr","with","worker_max_blocking_threads","workers","workers"],"q":["actix_server","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","Server builder","","","","The <code>TestServer</code> type.","Register service configuration function. This function …","Set the maximum number of pending connections.","Add new service to the server.","Add new service to server","Add new unix domain service to the server.","","","","","","","","","","","Start server building process","","","Execute external configuration as part of the server …","","","Disable signal handling.","","","","","","","","","","","","","","Add new service to the server.","Add new service to server","Add new unix domain service to the server. Useful when …","Sets the maximum per-worker number of concurrent …","Start server building process","Create new Server builder instance","Execute future before services initialization.","Pause accepting incoming connections","","","Resume accepting incoming connections","Starts processing incoming connections and return server …","Register service.","Timeout for graceful workers shutdown in seconds.","Start new server with server builder","Stop incoming connection processing, stop all workers and …","Stop Actix system.","","","","","","","","","","","","","","","","","","Get first available unused local address","Start new test server with application factory","Set max number of threads for each worker’s blocking …","Set number of workers to start.","Set number of workers to start."],"i":[1,0,0,0,0,0,0,2,3,3,2,3,3,2,4,5,6,3,2,4,5,6,6,6,6,3,1,3,3,6,3,2,4,5,6,3,2,4,5,6,3,6,3,2,3,3,0,3,4,6,3,6,6,3,4,3,5,6,3,6,3,2,4,5,6,3,2,4,5,6,6,3,2,4,5,6,5,5,3,3,2],"f":[null,null,null,null,null,null,null,[[],["result",6]],[[["u32",15]]],[[["str",15],["asref",8]],["result",6]],[[["str",15],["asref",8]],["result",6]],[[],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["serverbuilder",3]],[[]],[[]],[[],[["result",6],["serverbuilder",3]]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["stdtcplistener",3],["str",15],["asref",8]],["result",6]],[[["stdtcplistener",3],["str",15],["asref",8]]],[[["stdunixlistener",3],["str",15],["asref",8]],["result",6]],[[["usize",15]]],[[],["serverbuilder",3]],[[],["serverbuilder",3]],[[]],[[]],[[["context",3],["pin",3]],["poll",4]],[[["context",3],["pin",3]],["poll",4]],[[]],[[],["server",3]],[[["str",15]]],[[["u64",15]]],[[],["testserverruntime",3]],[[["bool",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["context",3],["pin",3]],["poll",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["socketaddr",4]],[[["servicefactory",8],["tcpstream",3]],["testserverruntime",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]]],"p":[[8,"ServiceFactory"],[3,"ServiceConfig"],[3,"ServerBuilder"],[3,"ServiceRuntime"],[3,"TestServer"],[3,"Server"]]},\
"actix_service":{"doc":"See [<code>Service</code>] docs for information on this crate’s …","t":[3,16,16,16,16,16,16,16,16,16,8,8,16,16,16,8,16,8,8,8,8,16,8,14,11,11,11,11,5,5,5,5,5,11,11,0,10,11,11,5,5,5,14,11,11,10,11,5,10,11,11,11,11,5,11,11,11,11,11,11,11,11,10,11,10,10,11,11,11,11,5,6,6,3,6,11,11,5,11,11,11,11,5,5,11,11,11],"n":["ApplyTransform","Config","Error","Error","Error","Future","Future","Future","InitError","InitError","IntoService","IntoServiceFactory","Response","Response","Response","Service","Service","ServiceExt","ServiceFactory","ServiceFactoryExt","Transform","Transform","TransformExt","always_ready","and_then","and_then","and_then","and_then","apply","apply_cfg","apply_cfg_factory","apply_fn","apply_fn_factory","borrow","borrow_mut","boxed","call","clone","clone_into","fn_factory","fn_factory_with_config","fn_service","forward_ready","from","into","into_factory","into_factory","into_service","into_service","map","map","map","map","map_config","map_err","map_err","map_err","map_err","map_init_err","map_init_err","map_init_err","map_init_err","new_service","new_service","new_transform","poll_ready","to_owned","try_from","try_into","type_id","unit_config","BoxFuture","BoxService","BoxServiceFactory","RcService","borrow","borrow_mut","factory","from","into","into_factory","new_service","rc_service","service","try_from","try_into","type_id"],"q":["actix_service","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","actix_service::boxed","","","","","","","","","","","","","","",""],"d":["Apply a [<code>Transform</code>] to a [<code>Service</code>].","Service factory configuration.","Errors produced by the service.","Errors produced by the service when polling readiness or …","Errors produced by the created services.","The future response value.","The future response value.","The future of the <code>Service</code> instance.g","Errors produced while building a transform service.","Errors potentially raised while building a service.","Trait for types that can be converted to a <code>Service</code>","Trait for types that can be converted to a <code>ServiceFactory</code>","Responses produced by the service.","Responses given by the service.","Responses given by the created services.","An asynchronous operation from <code>Request</code> to a <code>Response</code>.","The kind of <code>Service</code> created by this factory.","An extension trait for [<code>Service</code>]s that provides a variety …","Factory for creating <code>Service</code>s.","An extension trait for [<code>ServiceFactory</code>]s that provides a …","Defines the interface of a service factory that wraps …","The <code>TransformService</code> value created by this factory","An extension trait for [<code>Transform</code>]s that provides a …","An implementation of <code>poll_ready</code> that always signals …","Call another service after call to this one has resolved …","Call another service after call to this one has resolved …","Call another service after call to this one has resolved …","Call another service after call to this one has resolved …","Apply a [<code>Transform</code>] to a [<code>Service</code>].","Convert <code>Fn(Config, &Service1) -> Future<Service2></code> fn to a …","Convert …","Apply transform function to a service.","Service factory that produces <code>apply_fn</code> service.","","","Trait object forms of services and service factories.","Process the request and return the response …","","","Create <code>ServiceFactory</code> for function that can produce …","Create <code>ServiceFactory</code> for function that accepts config …","Create <code>ServiceFactory</code> for function that can act as a …","An implementation of <code>poll_ready</code> that forwards readiness …","","","Convert <code>Self</code> to a <code>ServiceFactory</code>","","Convert object of type <code>U</code> to a service <code>S</code>","Convert to a <code>Service</code>","Map this service’s output to a different type, …","Map this service’s output to a different type, …","Map this service’s output to a different type, …","Map this service’s output to a different type, …","Adapt external config argument to a config for provided …","Map this service’s error to a different error, …","Map this service’s error to a different error, …","Map this service’s error to a different error, …","Map this service’s error to a different error, …","Map this factory’s init error to a different error, …","Map this factory’s init error to a different error, …","Return a new <code>Transform</code> whose init error is mapped to to a …","Return a new <code>Transform</code> whose init error is mapped to to a …","Create and return a new service asynchronously.","","Creates and returns a new Transform component, …","Returns <code>Ready</code> when the service is able to process …","","","","","Replace config with unit.","A boxed future with no send bound or lifetime parameters.","Type alias for service trait object using <code>Box</code>.","Wrapper for a service factory that will map it’s …","Type alias for service trait object using <code>Rc</code>.","","","Wraps a service factory that returns service trait …","","","","","Wraps service as a trait object using [<code>RcService</code>].","Wraps service as a trait object using [<code>BoxService</code>].","","",""],"i":[0,1,2,3,1,2,3,1,2,1,0,0,2,3,1,0,1,0,0,0,0,2,0,0,4,4,5,5,0,0,0,0,0,6,6,0,3,6,6,0,0,0,0,6,6,7,6,0,8,4,4,5,5,0,4,4,5,5,5,5,9,9,1,6,2,3,6,6,6,6,0,0,0,0,0,10,10,0,10,10,10,10,0,0,10,10,10],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["andthenservice",3]],[[],["andthenservice",3]],[[],["andthenservicefactory",3]],[[],["andthenservicefactory",3]],[[],["applytransform",3]],[[]],[[]],[[],["apply",3]],[[],["applyfactory",3]],[[]],[[]],null,[[]],[[]],[[]],[[],["fnservicenoconfig",3]],[[],["fnserviceconfig",3]],[[],["fnservicefactory",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["map",3]],[[],["map",3]],[[],["mapservicefactory",3]],[[],["mapservicefactory",3]],[[],["mapconfig",3]],[[],["maperr",3]],[[],["maperr",3]],[[],["maperrservicefactory",3]],[[],["maperrservicefactory",3]],[[],["mapiniterr",3]],[[],["mapiniterr",3]],[[],["transformmapiniterr",3]],[[],["transformmapiniterr",3]],[[]],[[]],[[]],[[["context",3]],[["result",4],["poll",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["unitconfig",3]],null,null,null,null,[[]],[[]],[[],["boxservicefactory",3]],[[]],[[]],[[]],[[]],[[],["rcservice",6]],[[],["boxservice",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[8,"ServiceFactory"],[8,"Transform"],[8,"Service"],[8,"ServiceExt"],[8,"ServiceFactoryExt"],[3,"ApplyTransform"],[8,"IntoServiceFactory"],[8,"IntoService"],[8,"TransformExt"],[3,"BoxServiceFactory"]]},\
"actix_tls":{"doc":"TLS acceptor and connector services for Actix ecosystem","tn":["accept","connect","Service","Tls","TlsError","borrow","borrow_mut","fmt","from","into","max_concurrent_tls_connect","native_tls","openssl","rustls","try_from","try_into","type_id","Acceptor","Error","NativeTlsAcceptorService","TlsAcceptor","TlsStream","accept","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","deref","deref_mut","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into_factory","into_service","is_write_vectored","new","new_service","poll_flush","poll_read","poll_read_ready","poll_ready","poll_shutdown","poll_write","poll_write_ready","poll_write_vectored","source","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","ALERT_FATAL","Acceptor","AcceptorService","AcceptorServiceResponse","AlpnError","Failure","HandshakeError","NOACK","SetupFailure","Ssl","SslAcceptor","SslAcceptorBuilder","SslError","TlsStream","WouldBlock","accept","accept","as_ptr","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","call","clone","clone","clone","clone_into","clone_into","clone_into","connect","context","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","from_ptr","into","into","into","into","into","into","into","into","into_context","into_factory","into_future","into_service","is_write_vectored","mozilla_intermediate","mozilla_intermediate_v5","mozilla_modern","mozilla_modern_v5","ne","new","new","new_ex_index","new_service","poll","poll_flush","poll_read","poll_read_ready","poll_ready","poll_shutdown","poll_write","poll_write_ready","poll_write_vectored","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_poll","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Acceptor","AcceptorService","AcceptorServiceFut","ServerConfig","Session","TlsStream","alpn_protocols","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","cert_resolver","ciphersuites","clone","clone","clone_into","clone_into","complete_io","deref","deref_mut","export_keying_material","from","from","from","from","from","from","get_alpn_protocol","get_negotiated_ciphersuite","get_peer_certificates","get_protocol_version","ignore_client_order","into","into","into","into","into","into_factory","into_future","into_service","is_handshaking","is_write_vectored","key_log","mtu","new","new","new_service","poll","poll_flush","poll_read","poll_read_ready","poll_ready","poll_shutdown","poll_write","poll_write_ready","poll_write_vectored","process_new_packets","read_tls","send_close_notify","session_storage","set_buffer_limit","set_client_certificate_verifier","set_persistence","set_protocols","set_single_cert","set_single_cert_with_ocsp_and_sct","ticketer","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_poll","type_id","type_id","type_id","type_id","type_id","versions","wants_read","wants_write","with_ciphersuites","write_tls","Address","Connect","ConnectError","ConnectService","ConnectServiceFactory","Connection","Custom","Default","InvalidInput","Io","NoRecords","Resolve","Resolver","Resolver","ResolverFactory","TcpConnector","TcpConnectorFactory","Unresolved","addrs","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call","call","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default_connector","default_connector_factory","deref","deref_mut","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_parts","hash","host","hostname","hostname","into","into","into","into","into","into","into","into","into","into_factory","into_factory","into_factory","into_parts","into_service","into_service","into_service","io_mut","io_ref","lookup","ne","new","new","new","new","new_connector","new_connector_factory","new_custom","new_service","new_service","new_service","poll_ready","poll_ready","poll_ready","port","port","port","replace_io","service","service","service","set_addr","set_addrs","set_local_addr","set_port","ssl","take_addrs","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_addr","native_tls","openssl","rustls","NativetlsConnector","TlsConnector","borrow","borrow","borrow_mut","borrow_mut","builder","call","clone","clone","clone_into","clone_into","connect","fmt","from","from","into","into","into_factory","into_service","new","new","new_service","poll_ready","service","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","ConnectAsyncExt","Failure","HandshakeError","OpensslConnector","OpensslConnectorService","SetupFailure","SslConnector","SslError","SslMethod","SslStream","WouldBlock","accept","as_ptr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder","call","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","code","configure","connect","connect","context","do_handshake","dtls","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_ptr","get_mut","get_pin_mut","get_ref","into","into","into","into","into","into","into","into","into_context","into_factory","into_future","into_io_error","into_service","io_error","new","new","new_service","poll","poll_accept","poll_connect","poll_do_handshake","poll_flush","poll_read","poll_ready","poll_shutdown","poll_write","service","source","source","ssl","ssl_error","tls","tls_client","tls_server","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_poll","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ClientConfig","Future","InvalidDns","RustlsConnector","RustlsConnectorService","RustlsConnectorServiceFuture","Session","TLS_SERVER_ROOTS","TlsStream","alpn_protocols","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","ciphersuites","client_auth_cert_resolver","clone","clone","clone","clone_into","clone_into","clone_into","complete_io","ct_logs","default","enable_early_data","enable_sni","enable_tickets","export_keying_material","fmt","from","from","from","from","from","get_alpn_protocol","get_mut","get_negotiated_ciphersuite","get_peer_certificates","get_protocol_version","get_ref","into","into","into","into","into","into_factory","into_future","into_inner","into_service","is_handshaking","key_log","mtu","new","new","new_service","poll","poll_flush","poll_read","poll_ready","poll_shutdown","poll_write","process_new_packets","read_tls","root_store","send_close_notify","service","session_persistence","set_buffer_limit","set_mtu","set_persistence","set_protocols","set_single_client_cert","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_poll","type_id","type_id","type_id","type_id","type_id","versions","wants_read","wants_write","with_ciphersuites","write_tls","connect","connection"],"q":["actix_tls","","actix_tls::accept","","","","","","","","","","","","","","","actix_tls::accept::native_tls","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","actix_tls::accept::openssl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","actix_tls::accept::rustls","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","actix_tls::connect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","actix_tls::connect::ssl","","","actix_tls::connect::ssl::native_tls","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","actix_tls::connect::ssl::openssl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","actix_tls::connect::ssl::rustls","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","actix_tls::connect::ssl::rustls::RustlsConnectorServiceFuture",""],"d":["TLS acceptor services for Actix ecosystem.","TCP connector services for Actix ecosystem.","","","TLS error combined with service error.","","","","","","Sets the maximum per-worker concurrent TLS connection …","","","","","","","Accept TLS connections via <code>native-tls</code> package.","An error returned from the TLS implementation.","","A wrapper around a <code>native_tls::TlsAcceptor</code>, providing an …","Wrapper type for <code>tokio_native_tls::TlsStream</code> in order to …","Accepts a new client connection with the provided stream.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create <code>native-tls</code> based <code>Acceptor</code> service factory.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Terminate the handshake with a fatal alert.","Accept TLS connections via <code>openssl</code> package.","","","An error returned from an ALPN selection callback.","The handshake failed.","An error or intermediate state after a TLS handshake …","Do not select a protocol, but continue the handshake.","Setup failed.","The state of an SSL/TLS session.","A type which wraps server-side streams in a TLS session.","A builder for <code>SslAcceptor</code>s.","An SSL error.","Wrapper type for <code>tokio_openssl::SslStream</code> in order to …","The handshake encountered a <code>WouldBlock</code> error midway …","Initiates a server-side TLS session on a stream.","Initiates a server-side TLS handshake.","","","","","","","","","","","","","","","","","","","","Consumes the builder, returning a <code>SslAcceptor</code>.","","","","","","","","Initiates a client-side TLS handshake.","Returns a shared reference to the inner raw <code>SslContext</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consumes the <code>SslAcceptor</code>, returning the inner raw …","","","","","Creates a new builder configured to connect to non-legacy …","Creates a new builder configured to connect to non-legacy …","Creates a new builder configured to connect to modern …","Creates a new builder configured to connect to modern …","","Create OpenSSL based <code>Acceptor</code> service factory.","Creates a new <code>Ssl</code>.","Returns a new extra data index.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Accept TLS connections via <code>rustls</code> package.","Rustls based <code>Acceptor</code> service","","Common configuration for a set of server sessions.","Generalises <code>ClientSession</code> and <code>ServerSession</code>","Wrapper type for <code>tokio_openssl::SslStream</code> in order to …","Protocol names we support, most preferred first. If empty …","","","","","","","","","","","","How to choose a server cert and key.","List of ciphersuites, in preference order.","","","","","This function uses <code>io</code> to complete any outstanding IO for …","","","Derives key material from the agreed session secrets.","","","","","","","Retrieves the protocol agreed with the peer via ALPN.","Retrieves the ciphersuite agreed with the peer.","Retrieves the certificate chain used by the peer to …","Retrieves the protocol version agreed with the peer.","Ignore the client’s ciphersuite order. Instead, choose …","","","","","","","","","Returns true if the session is currently perform the TLS …","","How to output key material for debugging.  The default …","Our MTU.  If None, we don’t limit TLS message sizes.","Create Rustls based <code>Acceptor</code> service factory.","Make a <code>ServerConfig</code> with a default set of ciphersuites, …","","","","","","","","","","","Processes any new packets read by a previous call to …","Read TLS content from <code>rd</code>.  This method does internal …","Queues a close_notify fatal alert to be sent in the next …","How to store client sessions.","Sets a limit on the internal buffers used to buffer …","Overrides the default <code>ClientCertVerifier</code> with something …","Sets the session persistence layer to <code>persist</code>.","Set the ALPN protocol list to the given protocol names. …","Sets a single certificate chain and matching private key. …","Sets a single certificate chain, matching private key and …","How to produce tickets.","","","","","","","","","","","","","","","","","","","Supported protocol versions, in no particular order. The …","Returns true if the caller should call <code>read_tls</code> as soon …","Returns true if the caller should call <code>write_tls</code> as soon …","Make a <code>ServerConfig</code> with a custom set of ciphersuites, no …","Writes TLS messages to <code>wr</code>.","Parse a host into parts (hostname and port).","Connection info.","","","","","","","Invalid input","Connection IO error","No dns records","An interface for custom async DNS resolvers.","DNS Resolver Service","Failed to resolve the hostname","DNS Resolver Service Factory","TCP connector service","TCP connector service factory","Unresolved host name","Get resolved request addresses.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create connector service with default parameters.","Create connector service factory with default parameters.","","","","","","","","","","","","","","","","","","","","","Reconstruct from a parts.","","Get hostname.","Get hostname part.","Get hostname.","","","","","","","","","","","","","Deconstruct into a parts.","","","","Returns a mutable reference to the underlying stream.","Returns a shared reference to the underlying stream.","","","","Construct new ConnectService factory","Create <code>Connect</code> instance by splitting the string by ‘:’…","","Create TCP connector service.","Create TCP connector service factory.","Constructor for custom Resolve trait object and use it as …","","","","","","","Get optional port part.","Get optional port part.","Get request port.","Replace inclosed object, return new Stream and old object","Construct new service","Create TCP connector service","","Set address.","Set list of addresses.","Set local_addr of connect.","Use port if address does not provide one.","SSL Services","Take resolved request addresses.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create new <code>Connect</code> instance from host and address. …","","","","Native-tls connector factory and service","A builder for client-side TLS connections.","","","","","Returns a new builder for a <code>TlsConnector</code>.","","","","","","Initiates a TLS handshake.","","","","","","","","","Returns a new connector with default settings.","","","","","","","","","","","","","The handshake failed.","An error or intermediate state after a TLS handshake …","OpenSSL connector factory","","Setup failed.","A type which wraps client-side streams in a TLS session.","An SSL error.","A type specifying the kind of protocol an <code>SslContext</code> will …","An asynchronous version of [<code>openssl::ssl::SslStream</code>].","The handshake encountered a <code>WouldBlock</code> error midway …","A convenience method wrapping <code>poll_accept</code>.","Returns a pointer to the underlying OpenSSL value.","","","","","","","","","","","","","","","","","Creates a new builder for TLS connections.","","","","","","","","","","","Returns a structure allowing for configuration of a …","Initiates a client-side TLS session on a stream.","A convenience method wrapping <code>poll_connect</code>.","Returns a shared reference to the inner raw <code>SslContext</code>.","A convenience method wrapping <code>poll_do_handshake</code>.","Support all versions of the DTLS protocol.","","","","","","","","","","","","","","","","","Constructs an <code>SslMethod</code> from a pointer to the underlying …","Returns a mutable reference to the underlying stream.","Returns a pinned mutable reference to the underlying …","Returns a shared reference to the underlying stream.","","","","","","","","","Consumes the <code>SslConnector</code>, returning the inner raw …","","","","","","","Like <code>SslStream::new</code>.","","","Like <code>SslStream::accept</code>.","Like <code>SslStream::connect</code>.","Like <code>SslStream::do_handshake</code>.","","","","","","","","","Returns a shared reference to the <code>Ssl</code> object associated …","","Support all versions of the TLS protocol.","Support all versions of the TLS protocol, explicitly as a …","Support all versions of the TLS protocol, explicitly as a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Common configuration for (typically) all connections made …","","See issue https://github.com/briansmith/webpki/issues/54","Rustls connector factory","","","Generalises <code>ClientSession</code> and <code>ServerSession</code>","","A wrapper around an underlying raw stream which …","Which ALPN protocols we include in our client hello. If …","","","","","","","","","","","","List of ciphersuites, in preference order.","How to decide what client auth certificate/keys to use.","","","","","","","This function uses <code>io</code> to complete any outstanding IO for …","Collection of certificate transparency logs. If this …","","Whether to send data on the first flight (“early data”…","Whether to send the Server Name Indication (SNI) extension…","Whether to support RFC5077 tickets.  You must provide a …","Derives key material from the agreed session secrets.","","","","","","","Retrieves the protocol agreed with the peer via ALPN.","","Retrieves the ciphersuite agreed with the peer.","Retrieves the certificate chain used by the peer to …","Retrieves the protocol version agreed with the peer.","","","","","","","","","","","Returns true if the session is currently perform the TLS …","How to output key material for debugging.  The default …","Our MTU.  If None, we don’t limit TLS message sizes.","","Make a <code>ClientConfig</code> with a default set of ciphersuites, …","","","","","","","Note: that it does not guarantee the final data to be …","Processes any new packets read by a previous call to …","Read TLS content from <code>rd</code>.  This method does internal …","Collection of root certificates.","Queues a close_notify fatal alert to be sent in the next …","","How we store session data or tickets.","Sets a limit on the internal buffers used to buffer …","Sets MTU to <code>mtu</code>.  If None, the default is used. If …","Sets persistence layer to <code>persist</code>.","Set the ALPN protocol list to the given protocol names. …","Sets a single client authentication certificate and …","","","","","","","","","","","","","","","","","","","","Supported versions, in no particular order.  The default …","Returns true if the caller should call <code>read_tls</code> as soon …","Returns true if the caller should call <code>write_tls</code> as soon …","Make a <code>ClientConfig</code> with a custom set of ciphersuites, no …","Writes TLS messages to <code>wr</code>.","",""],"i":[0,0,1,1,0,1,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,2,3,4,5,2,6,3,4,5,2,6,5,4,2,4,2,3,3,2,6,6,3,3,4,5,2,2,6,6,3,4,5,2,6,4,5,3,4,4,3,3,3,5,3,3,3,3,6,4,2,6,3,4,5,2,6,3,4,5,2,6,3,4,5,2,6,7,0,0,0,0,8,0,7,8,0,0,0,0,0,8,9,10,10,10,11,12,13,14,15,9,7,10,10,11,12,13,14,15,9,7,10,15,13,12,9,7,12,9,7,10,9,11,15,10,11,15,10,10,7,7,10,11,11,12,13,14,15,9,7,10,10,11,12,13,14,15,9,7,10,9,12,14,13,11,9,9,9,9,7,12,10,10,12,14,11,11,11,13,11,11,11,11,12,9,7,11,12,13,14,15,9,7,10,11,12,13,14,15,9,7,10,14,11,12,13,14,15,9,7,10,0,0,0,0,0,0,16,17,18,19,20,16,17,18,19,20,16,19,16,16,18,16,18,16,21,17,17,21,17,17,18,19,20,16,21,21,21,21,16,17,18,19,20,16,18,20,19,21,17,16,16,18,16,18,20,17,17,17,19,17,17,17,17,21,21,21,16,21,16,16,16,16,16,16,18,16,17,18,19,20,16,17,18,19,20,16,20,17,18,19,20,16,16,21,21,16,21,0,0,0,0,0,0,22,22,23,23,23,0,0,23,0,0,0,23,24,25,26,24,27,28,23,29,22,30,25,26,24,27,28,23,29,22,30,28,22,30,26,27,28,29,22,30,26,27,28,29,22,30,0,0,25,25,24,25,24,24,27,28,23,23,25,26,24,24,27,28,23,29,22,30,25,24,25,31,24,25,26,24,27,28,23,29,22,30,26,27,29,25,28,22,30,25,25,32,24,25,26,24,29,0,0,22,26,27,29,28,22,30,31,31,24,25,26,27,29,24,24,24,24,0,24,26,27,28,29,22,30,24,23,25,26,24,27,28,23,29,22,30,25,26,24,27,28,23,29,22,30,25,26,24,27,28,23,29,22,30,24,0,0,0,0,0,33,34,33,34,34,33,33,34,33,34,34,34,33,34,33,34,33,33,33,34,33,33,33,33,34,33,34,33,34,33,34,0,8,0,0,0,8,0,0,0,0,8,35,36,37,38,39,40,41,8,36,35,37,38,39,40,41,8,36,35,40,38,37,38,40,36,37,38,40,36,41,40,40,35,40,35,36,40,41,41,8,8,35,37,38,39,40,41,41,8,8,36,35,36,35,35,35,37,38,39,40,41,8,36,35,40,37,39,41,38,41,37,35,37,39,35,35,35,35,35,38,35,35,37,41,8,35,41,36,36,36,37,38,40,36,41,8,37,38,39,40,41,8,36,35,37,38,39,40,41,8,36,35,39,37,38,39,40,41,8,36,35,0,42,42,0,0,0,0,0,0,43,44,45,42,46,43,44,45,42,46,43,45,43,43,44,45,43,44,45,43,21,43,43,43,43,43,21,46,44,45,42,46,43,21,46,21,21,21,46,44,45,42,46,43,44,42,46,45,21,43,43,44,43,44,42,46,46,45,46,46,21,21,43,21,44,43,21,43,43,43,43,44,45,43,44,45,42,46,43,44,45,42,46,43,42,44,45,42,46,43,43,21,21,43,21,47,47],"f":[null,null,null,null,null,[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["usize",15]]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["tlsacceptor",3]],[[]],[[]],[[]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[["tlsstream",3]]],[[]],[[]],[[]],[[["tlsacceptor",3]],["tlsacceptor",3]],[[["error",4]],["error",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["tlsacceptor",3]]],[[]],[[["context",3],["pin",3]],[["poll",4],["result",6]]],[[["readbuf",3],["context",3],["pin",3]],[["poll",4],["result",6]]],[[["context",3]],[["result",6],["poll",4]]],[[["context",3]],[["result",4],["poll",4]]],[[["context",3],["pin",3]],[["poll",4],["result",6]]],[[["context",3],["pin",3]],[["poll",4],["result",6]]],[[["context",3]],[["result",6],["poll",4]]],[[["context",3],["pin",3]],[["poll",4],["result",6]]],[[],[["error",8],["option",4]]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["handshakeerror",4],["result",4],["sslstream",3]]],[[],[["handshakeerror",4],["result",4],["sslstream",3]]],[[]],[[],["sslref",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["sslref",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["sslacceptor",3]],[[]],[[]],[[],["sslacceptor",3]],[[],["alpnerror",3]],[[]],[[]],[[]],[[],[["handshakeerror",4],["result",4],["sslstream",3]]],[[],["sslcontextref",3]],[[]],[[],["sslcontextbuilder",3]],[[],["sslref",3]],[[]],[[],["sslcontextbuilder",3]],[[],["sslref",3]],[[]],[[["alpnerror",3]],["bool",15]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[["sslstream",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ssl",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["sslcontext",3]],[[]],[[]],[[]],[[],["bool",15]],[[["sslmethod",3]],[["sslacceptorbuilder",3],["errorstack",3],["result",4]]],[[["sslmethod",3]],[["sslacceptorbuilder",3],["errorstack",3],["result",4]]],[[["sslmethod",3]],[["sslacceptorbuilder",3],["errorstack",3],["result",4]]],[[["sslmethod",3]],[["sslacceptorbuilder",3],["errorstack",3],["result",4]]],[[["alpnerror",3]],["bool",15]],[[["sslacceptor",3]]],[[["sslcontextref",3]],[["errorstack",3],["result",4],["ssl",3]]],[[],[["errorstack",3],["result",4],["index",3]]],[[]],[[["context",3],["pin",3]],["poll",4]],[[["context",3],["pin",3]],[["poll",4],["result",6]]],[[["readbuf",3],["context",3],["pin",3]],[["poll",4],["result",6]]],[[["context",3]],[["result",6],["poll",4]]],[[["context",3]],[["result",4],["poll",4]]],[[["context",3],["pin",3]],[["poll",4],["result",6]]],[[["context",3],["pin",3]],[["poll",4],["result",6]]],[[["context",3]],[["result",6],["poll",4]]],[[["context",3],["pin",3]],[["poll",4],["result",6]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["context",3],["pin",3]],["poll",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[],["serverconfig",3]],[[]],[[]],[[],[["error",3],["result",4]]],[[]],[[]],[[["option",4]],[["tlserror",4],["result",4]]],[[]],[[["tlsstream",3]]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],[["supportedciphersuite",3],["option",4]]],[[],[["option",4],["vec",3]]],[[],[["option",4],["protocolversion",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,null,[[["serverconfig",3]]],[[["arc",3],["clientcertverifier",8]],["serverconfig",3]],[[]],[[["context",3],["pin",3]],["poll",4]],[[["context",3],["pin",3]],[["poll",4],["result",6]]],[[["readbuf",3],["context",3],["pin",3]],[["poll",4],["result",6]]],[[["context",3]],[["result",6],["poll",4]]],[[["context",3]],[["result",4],["poll",4]]],[[["context",3],["pin",3]],[["poll",4],["result",6]]],[[["context",3],["pin",3]],[["poll",4],["result",6]]],[[["context",3]],[["result",6],["poll",4]]],[[["context",3],["pin",3]],[["poll",4],["result",6]]],[[],[["tlserror",4],["result",4]]],[[["read",8]],[["result",4],["usize",15],["error",3]]],[[]],null,[[["usize",15]]],[[["arc",3],["clientcertverifier",8]]],[[["storesserversessions",8],["arc",3]]],[[]],[[["vec",3],["privatekey",3],["certificate",3],["global",3]],[["tlserror",4],["result",4]]],[[["vec",3],["u8",15],["vec",3],["certificate",3],["privatekey",3],["global",3]],[["tlserror",4],["result",4]]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["context",3],["pin",3]],["poll",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["bool",15]],[[],["bool",15]],[[["arc",3],["clientcertverifier",8]],["serverconfig",3]],[[["write",8]],[["result",4],["usize",15],["error",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["connectaddrsiter",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["connect",3]]],[[["connect",3]]],[[["connect",3]]],[[]],[[],["tcpconnectorfactory",3]],[[],["tcpconnector",3]],[[],["resolverfactory",3]],[[],["resolver",4]],[[],["connectservice",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["connect",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u16",15],["str",15]],[["localboxfuture",6],["result",4]]],[[["connect",3]],["bool",15]],[[]],[[["resolver",4]]],[[],["connect",3]],[[["resolver",4]]],[[["resolver",4]]],[[["resolver",4]]],[[]],[[]],[[]],[[]],[[["context",3]],[["poll",4],["result",4]]],[[["context",3]],[["poll",4],["result",4]]],[[["context",3]],[["poll",4],["result",4]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u16",15]]],[[],["u16",15]],[[]],[[],["connectservice",3]],[[],["tcpconnector",3]],[[],["resolver",4]],[[["option",4],["socketaddr",4]]],[[]],[[]],[[["u16",15]]],null,[[],["connectaddrsiter",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["socketaddr",4]],["connect",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["tlsconnectorbuilder",3]],[[["connection",3]]],[[]],[[],["tlsconnector",3]],[[]],[[]],[[["str",15]],[["handshakeerror",4],["result",4],["tlsstream",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["tlsconnector",3]]],[[],[["error",3],["tlsconnector",3],["result",4]]],[[]],[[["context",3]],[["poll",4],["result",4]]],[[["tlsconnector",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[["pin",3],["sslstream",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["sslmethod",3]],[["sslconnectorbuilder",3],["result",4],["errorstack",3]]],[[["connection",3]]],[[]],[[]],[[],["sslconnector",3]],[[],["sslmethod",3]],[[]],[[]],[[]],[[]],[[],["errorcode",3]],[[],[["result",4],["errorstack",3],["connectconfiguration",3]]],[[["str",15]],[["handshakeerror",4],["result",4],["sslstream",3]]],[[["pin",3],["sslstream",3]]],[[],["sslcontextref",3]],[[["pin",3],["sslstream",3]]],[[],["sslmethod",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[]],[[]],[[["errorstack",3]],["error",3]],[[]],[[]],[[["errorstack",3]],["handshakeerror",4]],[[]],[[]],[[],["sslmethod",3]],[[]],[[["pin",3],["sslstream",3]],["pin",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["sslcontext",3]],[[]],[[]],[[],[["error",3],["error",3],["result",4]]],[[]],[[],[["option",4],["error",3]]],[[["sslconnector",3]]],[[["ssl",3]],[["sslstream",3],["errorstack",3],["result",4]]],[[]],[[["context",3],["pin",3]],["poll",4]],[[["pin",3],["sslstream",3],["context",3]],[["poll",4],["result",4]]],[[["pin",3],["sslstream",3],["context",3]],[["poll",4],["result",4]]],[[["pin",3],["sslstream",3],["context",3]],[["poll",4],["result",4]]],[[["pin",3],["sslstream",3],["context",3]],[["result",4],["poll",4]]],[[["readbuf",3],["pin",3],["sslstream",3],["context",3]],[["result",4],["poll",4]]],[[["context",3]],[["poll",4],["result",4]]],[[["pin",3],["sslstream",3],["context",3]],[["result",4],["poll",4]]],[[["pin",3],["sslstream",3],["context",3]],[["result",4],["poll",4]]],[[["sslconnector",3]],["opensslconnectorservice",3]],[[],[["error",8],["option",4]]],[[],[["error",8],["option",4]]],[[],["sslref",3]],[[],[["errorstack",3],["option",4]]],[[],["sslmethod",3]],[[],["sslmethod",3]],[[],["sslmethod",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["context",3],["pin",3]],["poll",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["connection",3]]],null,null,[[]],[[]],[[],["clientconfig",3]],[[]],[[]],[[]],[[],[["error",3],["result",4]]],null,[[],["clientconfig",3]],null,null,null,[[["option",4]],[["tlserror",4],["result",4]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],[["supportedciphersuite",3],["option",4]]],[[],[["option",4],["vec",3]]],[[],[["option",4],["protocolversion",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,null,[[["arc",3],["clientconfig",3]]],[[],["clientconfig",3]],[[]],[[["context",3],["pin",3]],["poll",4]],[[["tlsstream",3],["pin",3],["context",3]],[["result",4],["poll",4]]],[[["pin",3],["readbuf",3],["tlsstream",3],["context",3]],[["result",4],["poll",4]]],[[["context",3]],[["poll",4],["result",4]]],[[["tlsstream",3],["pin",3],["context",3]],[["result",4],["poll",4]]],[[["tlsstream",3],["pin",3],["context",3]],[["result",4],["poll",4]]],[[],[["tlserror",4],["result",4]]],[[["read",8]],[["result",4],["usize",15],["error",3]]],null,[[]],[[["arc",3],["clientconfig",3]],["rustlsconnectorservice",3]],null,[[["usize",15]]],[[["option",4]]],[[["arc",3],["storesclientsessions",8]]],[[]],[[["vec",3],["privatekey",3],["certificate",3],["global",3]],[["tlserror",4],["result",4]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["context",3],["pin",3]],["poll",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["bool",15]],[[],["bool",15]],[[],["clientconfig",3]],[[["write",8]],[["result",4],["usize",15],["error",3]]],null,null],"p":[[4,"TlsError"],[3,"TlsAcceptor"],[3,"TlsStream"],[3,"Acceptor"],[3,"NativeTlsAcceptorService"],[3,"Error"],[3,"AlpnError"],[4,"HandshakeError"],[3,"SslAcceptor"],[3,"Ssl"],[3,"TlsStream"],[3,"Acceptor"],[3,"AcceptorService"],[3,"AcceptorServiceResponse"],[3,"SslAcceptorBuilder"],[3,"ServerConfig"],[3,"TlsStream"],[3,"Acceptor"],[3,"AcceptorService"],[3,"AcceptorServiceFut"],[8,"Session"],[4,"Resolver"],[4,"ConnectError"],[3,"Connect"],[3,"Connection"],[3,"ConnectServiceFactory"],[3,"TcpConnectorFactory"],[3,"TcpConnector"],[3,"ResolverFactory"],[3,"ConnectService"],[8,"Address"],[8,"Resolve"],[3,"NativetlsConnector"],[3,"TlsConnector"],[3,"SslStream"],[3,"SslMethod"],[3,"OpensslConnector"],[3,"OpensslConnectorService"],[3,"ConnectAsyncExt"],[3,"SslConnector"],[3,"SslError"],[4,"RustlsConnectorServiceFuture"],[3,"ClientConfig"],[3,"RustlsConnector"],[3,"RustlsConnectorService"],[3,"TlsStream"],[13,"Future"]]},\
"actix_tracing":{"doc":"Actix tracing - support for tokio tracing with Actix …","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11],"n":["TracingService","TracingTransform","borrow","borrow","borrow_mut","borrow_mut","call","clone","clone_into","from","from","into","into","into_service","new","new","new_transform","poll_ready","to_owned","trace","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["actix_tracing","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A <code>Service</code> implementation that automatically enters/exits …","A <code>Transform</code> implementation that wraps services with a […","","","","","","","","","","","","","","","","","","Wraps the provided service factory with a transform that …","","","","","",""],"i":[0,0,1,2,1,2,2,2,2,1,2,1,2,2,1,2,1,2,2,0,1,2,1,2,1,2],"f":[null,null,[[]],[[]],[[]],[[]],[[]],[[],["tracingservice",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["context",3]],[["poll",4],["result",4]]],[[]],[[],[["tracingtransform",3],["applytransform",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"TracingTransform"],[3,"TracingService"]]},\
"actix_utils":{"doc":"Various utilities for the Actix ecosystem.","t":[0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,3,3,13,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["counter","future","Counter","CounterGuard","available","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","drop","fmt","fmt","from","from","get","into","into","new","to_owned","total","try_from","try_from","try_into","try_into","type_id","type_id","Either","Left","PollFn","Ready","Right","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","err","fmt","fmt","fmt","from","from","from","into","into","into","into_future","into_future","into_future","into_inner","into_inner","left","ok","poll","poll","poll","poll_fn","ready","right","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","value"],"q":["actix_utils","","actix_utils::counter","","","","","","","","","","","","","","","","","","","","","","","","","","actix_utils::future","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","actix_utils::future::Either",""],"d":["Task-notifying counter.","Asynchronous values.","Simple counter with ability to notify task on reaching …","An RAII structure that keeps the underlying counter …","Notify current task and return true if counter is at …","","","","","","","","","","","","Create new counter guard, incrementing the counter.","","","Create <code>Counter</code> instance with max value.","","Get total number of acquired guards.","","","","","","","Combines two different futures that have the same output …","A value of type <code>L</code>.","A Future driven by the inner function.","Future for the <code>ready</code> function.","A value of type <code>R</code>.","","","","","","","","","","","Creates a future that is immediately ready with an error …","","","","","","","","","","","","","Unwraps into inner value when left and right have a …","Unwraps the value from this immediately ready future.","Creates new <code>Either</code> using left variant.","Creates a future that is immediately ready with a success …","","","","Creates a future driven by the provided function that …","Creates a future that is immediately ready with a value.","Creates new <code>Either</code> using right variant.","","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,2,1,2,1,1,2,1,2,1,2,1,1,2,1,1,1,1,2,1,2,1,2,0,3,0,0,3,4,3,5,4,3,5,3,5,3,5,0,4,3,5,4,3,5,4,3,5,4,3,5,3,5,3,0,4,3,5,0,0,3,3,5,4,3,5,4,3,5,4,3,5,6,7],"f":[null,null,null,null,[[["context",3]],["bool",15]],[[]],[[]],[[]],[[]],[[],["counter",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["counterguard",3]],[[]],[[]],[[["usize",15]]],[[]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["either",4]],[[],["ready",3]],[[]],[[]],[[],[["ready",3],["result",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["either",4]],[[],[["ready",3],["result",4]]],[[["context",3],["pin",3]],["poll",4]],[[["context",3],["pin",3]],["poll",4]],[[["context",3],["pin",3]],["poll",4]],[[],["pollfn",3]],[[],["ready",3]],[[],["either",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null],"p":[[3,"Counter"],[3,"CounterGuard"],[4,"Either"],[3,"PollFn"],[3,"Ready"],[13,"Left"],[13,"Right"]]},\
"bytestring":{"doc":"A UTF-8 encoded read-only string using Bytes as storage.","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ByteString","as_bytes","as_ref","as_ref","borrow","borrow","borrow_mut","clone","clone_into","cmp","default","deref","deserialize","eq","eq","fmt","fmt","from","from","from","from_bytes_unchecked","from_static","hash","into","into_bytes","new","partial_cmp","serialize","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","type_id"],"q":["bytestring","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An immutable UTF-8 encoded string with [<code>Bytes</code>] as a …","Get a reference to the underlying <code>Bytes</code> object.","","","","","","","","","","","","","","","","","","","Creates a new <code>ByteString</code> from a Bytes.","Creates a new <code>ByteString</code> from a <code>&\'static str</code>.","","","Unwraps this <code>ByteString</code> into the underlying <code>Bytes</code> object.","Creates a new empty <code>ByteString</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[],["bytes",3]],[[]],[[],["str",15]],[[]],[[],["str",15]],[[]],[[],["bytestring",3]],[[]],[[["bytestring",3]],["ordering",4]],[[],["bytestring",3]],[[],["str",15]],[[],["result",4]],[[["str",15]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["str",15]]],[[["string",3]]],[[["bytes",3]],["bytestring",3]],[[["str",15]],["bytestring",3]],[[]],[[]],[[],["bytes",3]],[[]],[[["bytestring",3]],[["ordering",4],["option",4]]],[[],["result",4]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["bytesmut",3]],["result",4]],[[["bytes",3]],["result",4]],[[["vec",3],["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"ByteString"]]},\
"local_channel":{"doc":"Non-thread-safe channels.","t":[0,12,3,3,3,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["mpsc","0","Receiver","SendError","Sender","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","channel","clone","clone_into","close","drop","drop","fmt","fmt","fmt","fmt","from","from","from","into","into","into","into_inner","poll_close","poll_flush","poll_next","poll_ready","recv","send","sender","start_send","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","try_poll_next","type_id","type_id","type_id"],"q":["local_channel","local_channel::mpsc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A non-thread-safe multi-producer, single-consumer, …","","The receiving end of a channel which implements the <code>Stream</code>…","Error returned when attempting to send after the channels…","The transmission end of a channel.","","","","","","","Creates a unbounded in-memory channel with buffered …","","","Closes the sender half.","","","","","","","","","","","","","Returns the message that was attempted to be sent but …","","","","","Receive the next value.","Sends the provided message along this channel.","Create an associated [Sender].","","","","","","","","","","","","",""],"i":[0,1,0,0,0,1,2,3,1,2,3,0,2,2,2,2,3,1,1,2,3,1,2,3,1,2,3,1,2,2,3,2,3,2,3,2,2,1,1,2,3,1,2,3,3,1,2,3],"f":[null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["context",3],["pin",3]],[["poll",4],["result",4]]],[[["context",3],["pin",3]],[["poll",4],["result",4]]],[[["context",3],["pin",3]],[["option",4],["poll",4]]],[[["context",3],["pin",3]],[["poll",4],["result",4]]],[[]],[[],[["result",4],["senderror",3]]],[[],["sender",3]],[[["pin",3]],[["result",4],["senderror",3]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["context",3],["pin",3]],[["poll",4],["option",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"SendError"],[3,"Sender"],[3,"Receiver"]]},\
"local_waker":{"doc":"A synchronization primitive for thread-local task wakeup.","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["LocalWaker","borrow","borrow_mut","default","fmt","from","into","new","register","take","try_from","try_into","type_id","wake"],"q":["local_waker","","","","","","","","","","","","",""],"d":["A synchronization primitive for task wakeup.","","","","","","","Creates a new, empty <code>LocalWaker</code>.","Registers the waker to be notified on calls to <code>wake</code>.","Returns the last <code>Waker</code> passed to <code>register</code>, so that the …","","","","Calls <code>wake</code> on the last <code>Waker</code> passed to <code>register</code>."],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[]],[[]],[[],["localwaker",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["waker",3]],["bool",15]],[[],[["waker",3],["option",4]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[3,"LocalWaker"]]}\
}');
initSearch(searchIndex);